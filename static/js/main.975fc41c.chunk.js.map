{"version":3,"sources":["components/header/Header.module.css","components/store/clients.js","components/store/appointments.js","components/store/index.js","components/header/Header.js","components/Clients/AddCarData.js","components/Clients/AddClientData.js","components/Clients/CarData.js","components/Clients/ClientData.js","components/Clients/ClientsContent.js","components/pages/Clients.js","components/Parts/PartsContent.js","components/pages/Parts.js","components/Appointments/AppointmentsData.js","components/Appointments/AppointmentsContent.js","components/pages/Appointments.js","App.js","index.js"],"names":["module","exports","clientSlice","createSlice","name","initialState","nume","prenume","telefon","email","numarInmatriculare","serieSasiu","marca","model","anulFabricatiei","tipMotorizare","capacitateMotor","caiPutere","kWPutere","istoricService","addClient","editClient","addCar","editCar","errorMessage","clientsData","carsData","clientCars","searchedClient","idCarForEdit","searchInput","edit","reducers","state","action","payload","console","log","updateClientCars","indexCarEdited","findIndex","car","carId","unshift","length","deleteClientCar","filter","clientAction","actions","appointmentSlice","contact","timpProgramare","masina","actiuni","primire","procesare","durata","appointmentsData","idAppointmentForEdit","editAppointmentData","appointmentsUpdate","appointmentsEditUpdate","index","appointment","id","deleteAppointment","splice","appointmentAction","store","configureStore","reducer","client","clientReducer","appointments","appointmentReducer","Header","_jsxs","Fragment","children","_jsx","className","styled","links","Link","to","Outlet","AddCardata","_ref","carData","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","result","json","data","message","carEditedInfo","clientId","carAddedInfo","onChange","target","value","type","placeholder","defaultValue","onClick","cancelHandler","AddClientData","editedClientInfo","CarData","map","anulFabricarie","ClientData","deleteClientHandler","ClientsContent","cars","clients","forEach","includes","push","addClientHandler","addCarHandler","Clients","useEffect","PartsContent","Parts","AppointmentsData","durate","AppointmentsContent","editedAppointmentInfo","step","min","max","Appointments","router","createBrowserRouter","path","element","App","RouterProvider","ReactDOM","createRoot","document","getElementById","render","Provider"],"mappings":"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","file":"static/js/main.975fc41c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Header_name__2BZ6W\",\"links\":\"Header_links__3KAOU\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    nume: '',\n    prenume: '',\n    telefon: '',\n    email: '',\n    numarInmatriculare: '',\n    serieSasiu: '',\n    marca: '',\n    model: '',\n    anulFabricatiei: '',\n    tipMotorizare: '',\n    capacitateMotor: '',\n    caiPutere: '',\n    kWPutere: '',\n    istoricService: '',\n    addClient: false,\n    editClient: false,\n    addCar: false,\n    editCar: false,\n    errorMessage: false,\n    clientsData: [],\n    carsData: [],\n    clientCars: [],\n    searchedClient: false,\n    idCarForEdit: \"\",\n    searchInput: \"\",\n    edit: false\n\n}\n\nconst clientSlice = createSlice({\n    name: 'client',\n    initialState: initialState,\n    reducers: {\n        nume(state, action) {\n            state.nume = action.payload;\n        },\n        prenume(state, action) {\n            state.prenume = action.payload;\n        },\n        telefon(state, action) {\n            state.telefon = action.payload;\n        },\n        email(state, action) {\n            state.email = action.payload;\n        },\n        numarInmatriculare(state, action) {\n            state.numarInmatriculare = action.payload;\n        },\n        serieSasiu(state, action) {\n            state.serieSasiu = action.payload;\n        },\n        marca(state, action) {\n            state.marca = action.payload;\n        },\n        model(state, action) {\n            state.model = action.payload;\n        },\n        anulFabricatiei(state, action) {\n            state.anulFabricatiei = action.payload;\n        },\n        tipMotorizare(state, action) {\n            state.tipMotorizare = action.payload;\n        },\n        capacitateMotor(state, action) {\n            state.capacitateMotor = action.payload;\n        },\n        caiPutere(state, action) {\n            state.caiPutere = action.payload;\n        },\n        kWPutere(state, action) {\n            state.kWPutere = action.payload;\n        },\n        istoricService(state, action) {\n            state.istoricService = action.payload;\n        },\n        addClient(state, action) {\n            state.addClient = action.payload;\n        },\n        editClient(state, action) {\n            state.editClient = action.payload;\n        },\n        addCar(state, action) {\n            state.addCar = action.payload;\n        },\n        editCar(state, action) {\n            state.editCar = action.payload;\n        },\n        errorMessage(state, action) {\n            state.errorMessage = action.payload;\n        },\n        clientsData(state, action) {\n            console.log(action.payload);\n            state.clientsData = action.payload;\n        },\n        clientCars(state, action) {\n            state.clientCars = action.payload;\n        },\n        carsData(state, action) {\n            state.carsData = action.payload;\n        },\n        searchedClient(state, action) {\n            state.searchedClient = action.payload;\n        },\n        idCarForEdit(state, action) {\n            state.idCarForEdit = action.payload\n        },\n        updateClientCars(state, action) {\n            console.log(action.payload);\n            const indexCarEdited = state.clientCars.findIndex(car => car.carId === action.payload.carId)\n            if (indexCarEdited === -1) {\n                state.clientCars.unshift(action.payload)\n            } else {\n                state.clientCars[(state.clientCars.length !== 0) ? indexCarEdited : 0] = action.payload\n            }\n        },\n        searchInput(state, action) {\n            state.searchInput = action.payload\n        },\n        deleteClientCar(state, action) {\n            state.clientCars = state.clientCars.filter(car => car.carId !== action.payload)\n        },\n        edit(state, action) {\n            state.edit = action.payload\n        }\n\n\n\n    }\n})\n\nexport const clientAction = clientSlice.actions;\nexport default clientSlice.reducer ","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    contact: '',\n    timpProgramare: '',\n    masina: '',\n    actiuni: '',\n    primire: '',\n    procesare: '',\n    durata: '',\n    appointmentsData: [],\n    idAppointmentForEdit: '',\n    editAppointmentData: []\n}\n\nconst appointmentSlice = createSlice({\n    name: 'client',\n    initialState: initialState,\n    reducers: {\n        contact(state, action) {\n            state.contact = action.payload\n        },\n        timpProgramare(state, action) {\n            state.timpProgramare = action.payload\n        },\n        masina(state, action) {\n            state.masina = action.payload\n        },\n        actiuni(state, action) {\n            state.actiuni = action.payload\n        },\n        primire(state, action) {\n            state.primire = action.payload\n        },\n        procesare(state, action) {\n            state.procesare = action.payload\n        },\n        durata(state, action) {\n            state.durata = action.payload\n        },\n        appointmentsData(state, action) {\n            state.appointmentsData = action.payload\n        },\n        appointmentsUpdate(state, action) {\n            if (state.appointmentsData.length === 0) {\n                state.appointmentsData[0] = action.payload\n            } else {\n                state.appointmentsData.unshift(action.payload)\n            }\n        },\n        idAppointmentForEdit(state, action) {\n            state.idAppointmentForEdit = action.payload\n        },\n        editAppointmentData(state, action) {\n            state.editAppointmentData = action.payload\n        },\n        appointmentsEditUpdate(state, action) {\n            const index = state.appointmentsData.findIndex(appointment => appointment.id === action.payload.id)\n            state.appointmentsData[index] = action.payload\n        },\n        deleteAppointment(state, action) {\n            const index = state.appointmentsData.findIndex(appointment => appointment.id === action.payload)\n            state.appointmentsData.splice(index, 1)\n        }\n\n\n\n    }\n})\n\nexport const appointmentAction = appointmentSlice.actions;\nexport default appointmentSlice.reducer ","import { configureStore } from \"@reduxjs/toolkit\";\n\n\nimport clientReducer from \"./clients\";\nimport appointmentReducer from \"./appointments\";\n\nconst store = configureStore({\n    reducer: { client: clientReducer, appointments: appointmentReducer },\n});\n\nexport default store;","import { Fragment } from 'react';\nimport styled from './Header.module.css'\nimport { Outlet, Link } from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <Fragment>\n            <header >\n                <div className={styled.name}>Service</div>\n                <nav>\n                    <ul>\n                        <li className={styled.links}>\n                            <Link to='service/clients'>Clients</Link>\n                            <Link to='service/parts'>Parts</Link>\n                            <Link to='service/appointments'>Appointments</Link>\n                        </li>\n                    </ul>\n                </nav>\n            </header>\n            <Outlet />\n        </Fragment>\n    )\n}\n\nexport default Header","import { useDispatch, useSelector } from \"react-redux\"\nimport { clientAction } from \"../store/clients\"\n\nconst AddCardata = ({ carData }) => {\n    const dispatch = useDispatch()\n    const idCarForEdit = useSelector(state => state.client.idCarForEdit)\n    const searchedClient = useSelector(state => state.client.searchedClient)\n    const numarInmatriculare = useSelector(state => state.client.numarInmatriculare)\n    const serieSasiu = useSelector(state => state.client.serieSasiu)\n    const marca = useSelector(state => state.client.marca)\n    const model = useSelector(state => state.client.model)\n    const anulFabricatiei = useSelector(state => state.client.anulFabricatiei)\n    const tipMotorizare = useSelector(state => state.client.tipMotorizare)\n    const capacitateMotor = useSelector(state => state.client.capacitateMotor)\n    const caiPutere = useSelector(state => state.client.caiPutere)\n    const kWPutere = useSelector(state => state.client.kWPutere)\n    const addCarHandler = (e) => {\n        e.preventDefault()\n        fetch('https://service-6ar7.onrender.com/addCar', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                numarInmatriculare: numarInmatriculare,\n                serieSasiu: serieSasiu,\n                marca: marca,\n                model: model,\n                anulFabricatiei: anulFabricatiei,\n                tipMotorizare: tipMotorizare,\n                capacitateMotor: capacitateMotor,\n                caiPutere: caiPutere,\n                kWPutere: kWPutere,\n                clientId: searchedClient[0].clientId,\n                istoricService: []\n            })\n        })\n            .then(result => result.json())\n            .then(data => {\n                if (!data.message) {\n                    dispatch(clientAction.errorMessage(data.errorMessage))\n                    return\n                }\n                dispatch(clientAction.updateClientCars(data.carAddedInfo))\n                dispatch(clientAction.numarInmatriculare(''))\n                dispatch(clientAction.serieSasiu(''))\n                dispatch(clientAction.marca(''))\n                dispatch(clientAction.model(''))\n                dispatch(clientAction.anulFabricatiei(''))\n                dispatch(clientAction.tipMotorizare(''))\n                dispatch(clientAction.capacitateMotor(''))\n                dispatch(clientAction.caiPutere(''))\n                dispatch(clientAction.kWPutere(''))\n                dispatch(clientAction.istoricService(''))\n                dispatch(clientAction.addCar(false))\n                dispatch(clientAction.editCar(false))\n            })\n\n    }\n    const editCarHandler = (e) => {\n        e.preventDefault()\n        fetch('https://service-6ar7.onrender.com/editCar', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                id: idCarForEdit,\n                numarInmatriculare: numarInmatriculare ? numarInmatriculare : carData.numarInmatriculare,\n                serieSasiu: serieSasiu ? serieSasiu : carData.serieSasiu,\n                marca: marca ? marca : carData.marca,\n                model: model ? model : carData.model,\n                anulFabricatiei: anulFabricatiei ? anulFabricatiei : carData.anulFabricatiei,\n                tipMotorizare: tipMotorizare ? tipMotorizare : carData.tipMotorizare,\n                capacitateMotor: capacitateMotor ? capacitateMotor : carData.capacitateMotor,\n                caiPutere: caiPutere ? caiPutere : 0,\n                kWPutere: kWPutere ? kWPutere : 0,\n            })\n        })\n            .then(result => result.json())\n            .then(data => {\n                if (!data.message) {\n                    dispatch(clientAction.errorMessage(data.errorMessage))\n                    return\n                } else {\n                    dispatch(clientAction.updateClientCars(data.carEditedInfo))\n                    dispatch(clientAction.edit(false))\n                    dispatch(clientAction.errorMessage(false))\n                    dispatch(clientAction.numarInmatriculare(''))\n                    dispatch(clientAction.serieSasiu(''))\n                    dispatch(clientAction.marca(''))\n                    dispatch(clientAction.model(''))\n                    dispatch(clientAction.anulFabricatiei(''))\n                    dispatch(clientAction.tipMotorizare(''))\n                    dispatch(clientAction.capacitateMotor(''))\n                    dispatch(clientAction.caiPutere(''))\n                    dispatch(clientAction.kWPutere(''))\n                    dispatch(clientAction.istoricService(''))\n                    dispatch(clientAction.idCarForEdit(''))\n                }\n            })\n    }\n    const cancelHandler = () => {\n        dispatch(clientAction.idCarForEdit(false))\n        dispatch(clientAction.edit(false))\n    }\n    return (\n        <div>\n            <form onSubmit={idCarForEdit ? editCarHandler : addCarHandler}>\n                <input onChange={(e) => dispatch(clientAction.numarInmatriculare(e.target.value))} type=\"text\" placeholder=\"Numar inmatriculare\" defaultValue={idCarForEdit ? carData.numarInmatriculare : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.serieSasiu(e.target.value))} type=\"text\" placeholder=\"Serie sasiu\" defaultValue={idCarForEdit ? carData.serieSasiu : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.marca(e.target.value))} type=\"text\" placeholder=\"Marca\" defaultValue={idCarForEdit ? carData.marca : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.model(e.target.value))} type=\"text\" placeholder=\"Model\" defaultValue={idCarForEdit ? carData.model : ''} ></input>\n                <input onChange={(e) => dispatch(clientAction.anulFabricatiei(e.target.value))} type=\"number\" placeholder=\"Anul fabricatiei\" defaultValue={idCarForEdit ? carData.anulFabricatiei : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.tipMotorizare(e.target.value))} type=\"text\" placeholder=\"Tip motorizare\" defaultValue={idCarForEdit ? carData.tipMotorizare : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.capacitateMotor(e.target.value))} type=\"number\" placeholder=\"Capacitate motor\" defaultValue={idCarForEdit ? carData.capacitateMotor : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.caiPutere(e.target.value))} type=\"number\" placeholder=\"Cai putere\" defaultValue={idCarForEdit ? carData.caiPutere : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.kWPutere(e.target.value))} type=\"number\" placeholder=\"kW putere\" defaultValue={idCarForEdit ? carData.kWPutere : ''}></input>\n                <button type=\"submit\">{idCarForEdit ? \"Save\" : \"Add car\"}</button>\n                <button onClick={cancelHandler}>Cancel</button>\n            </form>\n        </div>\n    )\n}\n\nexport default AddCardata","import { useDispatch, useSelector } from \"react-redux\"\nimport { clientAction } from \"../store/clients\"\n\nconst AddClientData = () => {\n    const dispatch = useDispatch()\n    const editClient = useSelector(state => state.client.editClient)\n    const searchedClient = useSelector(state => state.client.searchedClient)\n    const nume = useSelector(state => state.client.nume)\n    const prenume = useSelector(state => state.client.prenume)\n    const telefon = useSelector(state => state.client.telefon)\n    const email = useSelector(state => state.client.email)\n    const addClientHandler = (e) => {\n        e.preventDefault()\n        fetch('https://service-6ar7.onrender.com/addClient', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ nume: nume, prenume: prenume, telefon: telefon, email: email })\n        })\n            .then(result => result.json())\n            .then(data => {\n                if (!data.message) {\n                    dispatch(clientAction.errorMessage(data.errorMessage))\n                    return\n                }\n                dispatch(clientAction.searchedClient([{ nume: nume, prenume: prenume, telefon: telefon, email: email, clientId: data.clientId }]))\n                dispatch(clientAction.errorMessage(false))\n                dispatch(clientAction.addClient(false))\n                dispatch(clientAction.editClient(false))\n                dispatch(clientAction.nume(''))\n                dispatch(clientAction.prenume(''))\n                dispatch(clientAction.telefon(''))\n                dispatch(clientAction.email(''))\n            })\n    }\n\n    const editClientHandler = (e) => {\n        e.preventDefault()\n        fetch('https://service-6ar7.onrender.com/editClient', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ nume: nume ? nume : searchedClient[0].nume, prenume: prenume ? prenume : searchedClient[0].prenume, telefon: telefon ? telefon : searchedClient[0].telefon, email: email ? email : searchedClient[0].email, id: searchedClient[0].clientId })\n        })\n            .then(result => result.json())\n            .then(data => {\n                if (!data.message) {\n                    dispatch(clientAction.errorMessage(data.errorMessage))\n                    return\n                } else {\n                    dispatch(clientAction.searchedClient([{ nume: data.editedClientInfo.nume, prenume: data.editedClientInfo.prenume, telefon: data.editedClientInfo.telefon, email: data.editedClientInfo.email, clientId: data.editedClientInfo.id }]))\n                    dispatch(clientAction.edit(false))\n                    dispatch(clientAction.errorMessage(false))\n                    dispatch(clientAction.addClient(false))\n                    dispatch(clientAction.editClient(false))\n                    dispatch(clientAction.nume(''))\n                    dispatch(clientAction.prenume(''))\n                    dispatch(clientAction.telefon(''))\n                    dispatch(clientAction.email(''))\n                }\n            })\n    }\n    const cancelHandler = () => {\n        dispatch(clientAction.editClient(false))\n        dispatch(clientAction.addClient(false))\n        dispatch(clientAction.edit(false))\n    }\n    return (\n        <div>\n            <form onSubmit={editClient ? editClientHandler : addClientHandler}>\n                <input onChange={(e) => dispatch(clientAction.nume(e.target.value))} type=\"text\" placeholder=\"Nume\" defaultValue={editClient ? searchedClient[0].nume : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.prenume(e.target.value))} type=\"text\" placeholder=\"Prenume\" defaultValue={editClient ? searchedClient[0].prenume : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.telefon(e.target.value))} type=\"text\" placeholder=\"Telefon\" defaultValue={editClient ? searchedClient[0].telefon : ''}></input>\n                <input onChange={(e) => dispatch(clientAction.email(e.target.value))} type=\"text\" placeholder=\"Email\" defaultValue={editClient ? searchedClient[0].email : ''}></input>\n                <button type=\"submit\">{editClient ? \"Save\" : \"Add client\"}</button>\n                <button onClick={cancelHandler}>Cancel</button>\n            </form>\n        </div>\n    )\n}\n\nexport default AddClientData","import { useDispatch, useSelector } from \"react-redux\"\nimport AddCardata from \"./AddCarData\"\nimport { clientAction } from \"../store/clients\"\n\n\nconst CarData = ({ clientCars }) => {\n    const idCarForEdit = useSelector(state => state.client.idCarForEdit)\n    const dispatch = useDispatch()\n\n    return (\n        <div>\n            {clientCars.map(car =>\n                <div key={car.carId}>\n                    <div type=\"text\">Numar inmatriculare: {car.numarInmatriculare} </div>\n                    <div type=\"text\">Serie sasiu: {car.serieSasiu} </div>\n                    <div type=\"text\">Marca: {car.marca}</div>\n                    <div type=\"text\">Model: {car.model}</div>\n                    <div type=\"text\">Anul fabricatie: {car.anulFabricarie}</div>\n                    <div type=\"text\">Tip motorizare: {car.tipMotorizare}</div>\n                    <div type=\"text\">Capacitate motor: {car.capacitateMotor}</div>\n                    <div type=\"text\">Cai putere: {car.caiPutere}</div>\n                    <div type=\"text\">kW putere: {car.kWPutere}</div>\n                    <div type=\"text\">Istoric service: {car.istoricService ? car.istoricService.map(data =>\n                        <div key={car.carId}>\n                            <div>{data.actiuni}</div>\n                            <div>{data.primire}</div>\n                            <div>{data.procesare}</div>\n                            <div>{data.durata}</div>\n                        </div>\n                    ) : ''}</div>\n                    {(idCarForEdit === car.carId) && <AddCardata carData={car} />}\n                    {(idCarForEdit !== car.carId) && <button onClick={() => {\n                        dispatch(clientAction.idCarForEdit(car.carId))\n                        dispatch(clientAction.edit(true))\n                    }}>Edit car</button>}\n                    {(idCarForEdit !== car.carId) && <button onClick={() => {\n                        fetch('https://service-6ar7.onrender.com/deleteCar', {\n                            method: 'POST',\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify({ id: car.carId })\n                        })\n                            .then(result => result.json())\n                            .then(data => {\n                                if (!data.message) {\n                                    dispatch(clientAction.errorMessage(data.errorMessage))\n                                    return\n                                } else {\n                                    dispatch(clientAction.deleteClientCar(car.carId))\n                                }\n                            })\n                    }}>Delete</button>}\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default CarData","import { useDispatch, useSelector } from \"react-redux\"\nimport { clientAction } from \"../store/clients\"\nimport AddClientData from \"./AddClientData\"\n\n\nconst ClientData = ({ nume, prenume, telefon, email, clientId, }) => {\n    const dispatch = useDispatch()\n    const editClient = useSelector(state => state.client.editClient)\n    const editClientHandler = (e) => {\n        dispatch(clientAction.editClient(true))\n        dispatch(clientAction.edit(true))\n    }\n    const deleteClientHandler = () => {\n        fetch('https://service-6ar7.onrender.com/deleteClient', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ clientId: clientId })\n        })\n            .then(result => result.json())\n            .then(data => {\n                if (!data.message) {\n                    dispatch(clientAction.errorMessage(data.errorMessage))\n                    return\n                } else {\n                    dispatch(clientAction.searchedClient(false))\n                    dispatch(clientAction.errorMessage(false))\n                    dispatch(clientAction.addClient(false))\n                    dispatch(clientAction.editClient(false))\n                    dispatch(clientAction.searchInput(''))\n                    dispatch(clientAction.nume(''))\n                    dispatch(clientAction.prenume(''))\n                    dispatch(clientAction.telefon(''))\n                    dispatch(clientAction.email(''))\n                }\n            })\n    }\n    return (\n        <div>\n            <div type=\"text\">Nume: {nume ? nume : ''} </div>\n            <div type=\"text\">Prenume: {prenume ? prenume : ''}</div>\n            <div type=\"number\">Telefon: {telefon ? telefon : ''}</div>\n            <div type=\"text\">Email: {email ? email : ''}</div>\n            {editClient && <AddClientData />}\n            {!editClient && <button onClick={editClientHandler}>Edit client</button>}\n            {!editClient && <button onClick={deleteClientHandler}>Delete</button>}\n        </div>\n    )\n}\n\nexport default ClientData","import { useDispatch, useSelector } from \"react-redux\"\nimport AddCardata from \"./AddCarData\"\nimport AddClientData from \"./AddClientData\"\nimport CarData from \"./CarData\"\nimport ClientData from \"./ClientData\"\nimport { clientAction } from \"../store/clients\"\n\n\nconst ClientsContent = () => {\n    const addClient = useSelector(state => state.client.addClient)\n    const addCar = useSelector(state => state.client.addCar)\n    const clientsData = useSelector(state => state.client.clientsData)\n    const clientCars = useSelector(state => state.client.clientCars)\n    const carsData = useSelector(state => state.client.carsData)\n    const searchedClient = useSelector(state => state.client.searchedClient)\n    const errorMessage = useSelector(state => state.client.errorMessage)\n    const searchInput = useSelector(state => state.client.searchInput)\n    const edit = useSelector(state => state.client.edit)\n    const dispatch = useDispatch()\n    const addClientHandler = () => {\n        dispatch(clientAction.addClient(true))\n        dispatch(clientAction.searchedClient(false))\n        dispatch(clientAction.searchInput(''))\n        dispatch(clientAction.clientCars([]))\n    }\n    const addCarHandler = () => {\n        dispatch(clientAction.addCar(true))\n    }\n    const findClientHandler = (e) => {\n        e.preventDefault()\n\n        let cars = []\n        let clients = []\n\n        clientsData.forEach(client => {\n            if (client.telefon.includes(searchInput) && searchInput.length >= 10) {\n                clients.push(client)\n\n                carsData.forEach(car => {\n                    if (car.clientId === client.clientId) {\n                        cars.push(car)\n                    }\n                })\n\n            } else if (searchInput === \"\") {\n                dispatch(clientAction.searchedClient(false))\n                dispatch(clientAction.clientCars([]))\n            }\n        })\n        dispatch(clientAction.searchedClient(clients))\n        dispatch(clientAction.clientCars(cars))\n    }\n    console.log(searchedClient);\n\n    return (\n        <div>\n            <form onSubmit={findClientHandler}>\n                <input onChange={(e) => {\n                    dispatch(clientAction.addClient(false))\n                    dispatch(clientAction.addCar(false))\n                    dispatch(clientAction.searchInput(e.target.value))\n                    if (e.target.value === '') {\n                        dispatch(clientAction.searchedClient(false))\n                        dispatch(clientAction.clientCars([]))\n                    }\n                }\n                } type=\"text\" placeholder=\"Search client\" value={searchInput}></input>\n                <button type=\"submit\">Search</button>\n            </form>\n            {!edit && <button onClick={addClientHandler}>New Client</button>}\n            {(searchedClient && !edit) && <button onClick={addCarHandler}>New Car</button>}\n            {addClient && <AddClientData />}\n            {errorMessage && <div>{errorMessage}</div>}\n            {(searchedClient.length === 1) && <ClientData nume={searchedClient[0].nume} prenume={searchedClient[0].prenume} telefon={searchedClient[0].telefon} email={searchedClient[0].email} clientId={searchedClient[0].clientId} />}\n            {addCar && <AddCardata />}\n            {searchedClient && <CarData clientCars={clientCars} />}\n        </div>\n    )\n}\n\nexport default ClientsContent","import { useEffect } from \"react\"\nimport ClientsContent from \"../Clients/ClientsContent\"\nimport { useDispatch } from \"react-redux\"\nimport { clientAction } from \"../store/clients\"\n\nconst Clients = () => {\n    const dispatch = useDispatch()\n    dispatch(clientAction.searchedClient(false))\n    dispatch(clientAction.clientCars([]))\n    dispatch(clientAction.searchInput(''))\n    useEffect(() => {\n        fetch('https://service-6ar7.onrender.com/clients', {\n            method: 'GET',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then(result => result.json())\n            .then(data => {\n                dispatch(clientAction.clientsData(data.clients))\n                dispatch(clientAction.carsData(data.cars))\n                dispatch(clientAction.errorMessage(false))\n\n            })\n    })\n    return (\n        <div>\n            <ClientsContent />\n        </div>\n    )\n}\n\nexport default Clients","// import styled from './PartsContent.module.css'\n\nconst PartsContent = () => {\n    return (\n        <div>Parts</div>\n    )\n}\n\nexport default PartsContent","import PartsContent from '../Parts/PartsContent'\n\nconst Parts = () => {\n    return (\n        <div>\n            <PartsContent />\n        </div>\n    )\n}\n\nexport default Parts","// import styled from './AppointmentsData.module.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { appointmentAction } from '../store/appointments'\nimport { clientAction } from '../store/clients'\n\nconst AppointmentsData = () => {\n    const appointmentsData = useSelector(state => state.appointments.appointmentsData)\n    const dispatch = useDispatch()\n    return (\n        <div>\n            {appointmentsData.map(appointment => (\n                <div key={appointment.id}>\n                    <div>Contact: {appointment.contact}</div>\n                    <div>Masina: {appointment.masina}</div>\n                    <div>Actiuni asupra masinii: {appointment.actiuni}</div>\n                    <div>Timp programare: {appointment.timpProgramare}</div>\n                    <div>Primire masina: {appointment.primire}</div>\n                    <div>Procesare masina: {appointment.procesare}</div>\n                    <div>Durata procesului: {appointment.durata}</div>\n                    <button onClick={() => {\n                        dispatch(appointmentAction.idAppointmentForEdit(appointment.id))\n                        dispatch(appointmentAction.contact(appointment.contact))\n                        dispatch(appointmentAction.masina(appointment.masina))\n                        dispatch(appointmentAction.actiuni(appointment.actiuni))\n                        dispatch(appointmentAction.timpProgramare(appointment.timpProgramare))\n                        dispatch(appointmentAction.primire(appointment.primire))\n                        dispatch(appointmentAction.procesare(appointment.procesare))\n                        dispatch(appointmentAction.durata(appointment.durata))\n                        dispatch(appointmentAction.editAppointmentData({ contact: appointment.contact, masina: appointment.masina, actiuni: appointment.actiuni, timpProgramare: appointment.timpProgramare, primire: appointment.primire, procesare: appointment.procesare, durata: appointment.durata }))\n                    }}>Edit</button>\n                    <button onClick={() => {\n                        fetch('https://service-6ar7.onrender.com/deleteAppointment', {\n                            method: 'POST',\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify({ id: appointment.id })\n                        })\n                            .then(result => result.json())\n                            .then(data => {\n                                if (!data.message) {\n                                    dispatch(clientAction.errorMessage(data.errorMessage))\n                                    return\n                                } else {\n                                    dispatch(appointmentAction.deleteAppointment(appointment.id))\n                                }\n                            })\n                    }\n\n                    }>Delete</button>\n                    <button onClick={() => {\n                        fetch('https://service-6ar7.onrender.com/addToCarHistory', {\n                            method: 'POST',\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify({ id: appointment.id, masina: appointment.masina, actiuni: appointment.actiuni, primire: appointment.primire, procesare: appointment.procesare, durate: appointment.durata })\n                        })\n                            .then(result => result.json())\n                            .then(data => {\n                                if (!data.message) {\n                                    dispatch(clientAction.errorMessage(data.errorMessage))\n                                    return\n                                } else {\n                                    dispatch(appointmentAction.deleteAppointment(appointment.id))\n                                }\n                            })\n                    }}>Complete</button>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default AppointmentsData","// import styled from './AppointmentsContent.module.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { appointmentAction } from '../store/appointments'\nimport { clientAction } from '../store/clients'\nimport AppointmentsData from './AppointmentsData'\n\nconst AppointmentsContent = () => {\n    const dispatch = useDispatch()\n    const contact = useSelector(state => state.appointments.contact)\n    const masina = useSelector(state => state.appointments.masina)\n    const actiuni = useSelector(state => state.appointments.actiuni)\n    const timpProgramare = useSelector(state => state.appointments.timpProgramare)\n    const primire = useSelector(state => state.appointments.primire)\n    const procesare = useSelector(state => state.appointments.procesare)\n    const durata = useSelector(state => state.appointments.durata)\n    const idAppointmentForEdit = useSelector(state => state.appointments.idAppointmentForEdit)\n    const errorMessage = useSelector(state => state.client.errorMessage)\n\n    const appointmentHandler = (e) => {\n        e.preventDefault()\n        fetch('https://service-6ar7.onrender.com/addAppointment', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ contact, masina, actiuni, timpProgramare, primire, procesare, durata })\n        })\n            .then(result => result.json())\n            .then(data => {\n                if (!data.message) {\n                    dispatch(clientAction.errorMessage(data.errorMessage))\n                    return\n                } else {\n                    dispatch(appointmentAction.appointmentsUpdate(data.appointment))\n                    dispatch(appointmentAction.contact(''))\n                    dispatch(appointmentAction.masina(''))\n                    dispatch(appointmentAction.actiuni(''))\n                    dispatch(appointmentAction.timpProgramare(''))\n                    dispatch(appointmentAction.primire(''))\n                    dispatch(appointmentAction.procesare(''))\n                    dispatch(appointmentAction.durata(''))\n                }\n            })\n    }\n    const editAppointmentHandler = (e) => {\n        e.preventDefault()\n        fetch('https://service-6ar7.onrender.com/editAppointment', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ contact, masina, actiuni, timpProgramare, primire, procesare, durata, id: idAppointmentForEdit })\n        })\n            .then(result => result.json())\n            .then(data => {\n                if (!data.message) {\n                    dispatch(clientAction.errorMessage(data.errorMessage))\n                    return\n                } else {\n                    console.log('he');\n                    dispatch(appointmentAction.appointmentsEditUpdate(data.editedAppointmentInfo))\n                    dispatch(appointmentAction.idAppointmentForEdit(false))\n                    dispatch(appointmentAction.contact(''))\n                    dispatch(appointmentAction.masina(''))\n                    dispatch(appointmentAction.actiuni(''))\n                    dispatch(appointmentAction.timpProgramare(''))\n                    dispatch(appointmentAction.primire(''))\n                    dispatch(appointmentAction.procesare(''))\n                    dispatch(appointmentAction.durata(''))\n                }\n            })\n    }\n    return (\n        <div>\n            <form onSubmit={idAppointmentForEdit ? editAppointmentHandler : appointmentHandler}>\n                <div>{errorMessage}</div>\n                <input type='text' onChange={(e) => dispatch(appointmentAction.contact(e.target.value))} placeholder='Contact' value={contact}></input>\n                <input type='text' onChange={(e) => dispatch(appointmentAction.masina(e.target.value))} placeholder='Masina' value={masina}></input>\n                <input type='text' onChange={(e) => dispatch(appointmentAction.actiuni(e.target.value))} placeholder='Actiune asupra masinii' value={actiuni}></input>\n                <input type='text' onChange={(e) => dispatch(appointmentAction.primire(e.target.value))} placeholder='Primire masina' value={primire}></input>\n                <input type='text' onChange={(e) => dispatch(appointmentAction.procesare(e.target.value))} placeholder='Procesare masina' value={procesare}></input>\n                <input type='number' step={10} onChange={(e) => dispatch(appointmentAction.durata(e.target.value))} placeholder='Durata procesului' value={durata}></input>\n                <input type='time' min=\"08:00\" max=\"17:00\" step=\"1800\" onChange={(e) => dispatch(appointmentAction.timpProgramare(e.target.value))} placeholder='Interval de timp' value={timpProgramare}></input>\n                <button type='submit'>Save</button>\n            </form >\n            <AppointmentsData />\n        </div>\n    )\n\n}\n\nexport default AppointmentsContent","import { useEffect } from 'react'\nimport AppointmentsContent from '../Appointments/AppointmentsContent'\nimport { appointmentAction } from '../store/appointments'\nimport { useDispatch } from 'react-redux'\n\nconst Appointments = () => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        fetch('https://service-6ar7.onrender.com/appointments', {\n            method: 'GET',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then(result => result.json())\n            .then(data => {\n                dispatch(appointmentAction.appointmentsData(data.appointments))\n\n            })\n    })\n    return (\n        <div>\n            <AppointmentsContent />\n        </div>\n    )\n}\n\nexport default Appointments","import './index.css';\nimport Header from './components/header/Header';\nimport Clients from './components/pages/Clients';\nimport Parts from './components/pages/Parts';\nimport Appointments from './components/pages/Appointments';\nimport { createBrowserRouter, RouterProvider, } from 'react-router-dom';\n\nconst router = createBrowserRouter([\n  {\n    path: 'service/', element: <Header />, children: [\n      { path: 'service/clients', element: <Clients /> },\n      { path: 'service/parts', element: <Parts /> },\n      { path: 'service/appointments', element: <Appointments /> },\n    ]\n  }\n])\n\nconst App = () => {\n  return (\n    <div >\n      <RouterProvider router={router} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from \"react-redux\";\nimport store from './components/store/index'\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\n\n"],"sourceRoot":""}